Outputs:
  outputSubnet:
    Export:
      Name: !Sub '${AWS::StackName}-TestSubnet'
    Value: !Ref 'TestSubnet'
Parameters:
  KeyName:
    Description: Name of an EC2 KeyPair to enable SSH
    Type: AWS::EC2::KeyPair::KeyName
Resources:
  AppSecurityGroup:
    Properties:
      GroupDescription: Enable HTTP access to the instance
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - CidrIp: 79.152.131.9/32
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  ApplicationInstance:
    Properties:
      ImageId: ami-064736ff8301af3ee
      InstanceType: t2.micro
      KeyName: !Ref 'KeyName'
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'AppSecurityGroup'
          SubnetId: !Ref 'TestSubnet'
      Tags:
        - Key: Name
          Value: Ec2 instance to hold our application in eu-west-3c
        - Key: Subnet
          Value: Belonging to the subnet 'TestSubnet'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - "sudo apt-get update\n"
            - "sudo apt-get install -y ca-certificates curl gnupg lsb-release\n"
            - "sudo mkdir -p /etc/apt/keyrings\n"
            - "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n"
            - "echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list\
              \ > /dev/null\n"
            - "sudo apt-get update\n"
            - "sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n"
            - "sudo usermod -aG docker ubuntu\n"
    Type: AWS::EC2::Instance
  ApplicationInstance2:
    Properties:
      ImageId: ami-064736ff8301af3ee
      InstanceType: t2.micro
      KeyName: !Ref 'KeyName'
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'AppSecurityGroup'
          SubnetId: !Ref 'TestSubnet2'
      Tags:
        - Key: Name
          Value: Ec2 Instance to hold our application in eu-west-3a
        - Key: Subnet
          Value: Belonging to the subnet 'TestSubnet2'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - "sudo apt-get update\n"
            - "sudo apt-get install -y ca-certificates curl gnupg lsb-release\n"
            - "sudo mkdir -p /etc/apt/keyrings\n"
            - "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n"
            - "echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list\
              \ > /dev/null\n"
            - "sudo apt-get update\n"
            - "sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n"
            - "sudo usermod -aG docker ubuntu\n"
    Type: AWS::EC2::Instance
  ApplicationLoadBalancer:
    Properties:
      Name: ApplicationELB
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt 'ELBSecurityGroup.GroupId'
      Subnets:
        - !Ref 'TestSubnet'
        - !Ref 'TestSubnet2'
      Tags:
        - Key: Name
          Value: ApplicationELB
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  ELBSecurityGroup:
    Properties:
      GroupDescription: Security Group used by the Load Balancer
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  EuWest3aListenerRule:
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'app80bis'
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /euwest3a/*
      ListenerArn: !Ref 'Listener'
      Priority: '2'
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
  EuWest3cListenerRule:
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'app80'
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - /euwest3c/*
      ListenerArn: !Ref 'Listener'
      Priority: '1'
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
  GatewayAttachment:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCGatewayAttachment
  InternetGateway:
    Properties:
      Tags:
        - Key: Description
          Value: Internet gateway attached to VPC
    Type: AWS::EC2::InternetGateway
  Listener:
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'app80'
          Type: forward
      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'
      Port: '80'
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  NetworkACL:
    Properties:
      Tags:
        - Key: Description
          Value: ACL for VPC
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::NetworkAcl
  Route:
    DependsOn: GatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'RouteTable'
    Type: AWS::EC2::Route
  RouteTable:
    Properties:
      Tags:
        - Key: Description
          Value: Routetable for our VPC
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  Subnet2NetworkAclAssociation:
    Properties:
      NetworkAclId: !Ref 'NetworkACL'
      SubnetId: !Ref 'TestSubnet2'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  Subnet2RouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'RouteTable'
      SubnetId: !Ref 'TestSubnet2'
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetNetworkAclAssociation:
    Properties:
      NetworkAclId: !Ref 'NetworkACL'
      SubnetId: !Ref 'TestSubnet'
    Type: AWS::EC2::SubnetNetworkAclAssociation
  SubnetRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'RouteTable'
      SubnetId: !Ref 'TestSubnet'
    Type: AWS::EC2::SubnetRouteTableAssociation
  TestSubnet:
    Properties:
      AvailabilityZone: eu-west-3c
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: Subnet for troposphere exercise
        - Key: ZoneBlock
          Value: eu-west-3c (Paris) & 10.0.0.0/24
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  TestSubnet2:
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: Subnet for ELB required input
        - Key: ZoneBlock
          Value: eu-west-3a (Paris) & 10.0.1.0/24
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  VPC:
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: VPC for troposphere exercise
    Type: AWS::EC2::VPC
  app80:
    Properties:
      HealthCheckIntervalSeconds: '30'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: '10'
      HealthyThresholdCount: '4'
      Matcher:
        HttpCode: '200'
      Name: appTarget
      Port: '80'
      Protocol: HTTP
      Targets:
        - Id: !Ref 'ApplicationInstance'
          Port: '80'
      UnhealthyThresholdCount: '3'
      VpcId: !Ref 'VPC'
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  app80bis:
    Properties:
      HealthCheckIntervalSeconds: '30'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: '10'
      HealthyThresholdCount: '4'
      Matcher:
        HttpCode: '200'
      Name: appTarget2
      Port: '80'
      Protocol: HTTP
      Targets:
        - Id: !Ref 'ApplicationInstance2'
          Port: '80'
      UnhealthyThresholdCount: '3'
      VpcId: !Ref 'VPC'
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  inBoundEphemeralEntry:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: false
      NetworkAclId: !Ref 'NetworkACL'
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '102'
    Type: AWS::EC2::NetworkAclEntry
  inboundHTTPentry:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: false
      NetworkAclId: !Ref 'NetworkACL'
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  inboundSSHentry:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: false
      NetworkAclId: !Ref 'NetworkACL'
      PortRange:
        From: '22'
        To: '22'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '101'
    Type: AWS::EC2::NetworkAclEntry
  outBoundHttpEntry:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: true
      NetworkAclId: !Ref 'NetworkACL'
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  outBoundHttpsEntry:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: true
      NetworkAclId: !Ref 'NetworkACL'
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '101'
    Type: AWS::EC2::NetworkAclEntry
  outBoundResponseEntry:
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: true
      NetworkAclId: !Ref 'NetworkACL'
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '102'
    Type: AWS::EC2::NetworkAclEntry
